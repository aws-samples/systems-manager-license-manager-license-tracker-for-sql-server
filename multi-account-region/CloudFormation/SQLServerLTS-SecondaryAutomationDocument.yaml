AWSTemplateFormatVersion: 2010-09-09
Description: 'CloudFormation template to deploy the Secondary Automation document along with a lambda function & scheduled trigger rule to manage cross-account sharing permissions of the document for SQL License Tracking Solution'
Parameters:
  ManagementAccountId:
    Type: String
    Description: AWS Account ID of the management/root account (account from which AWS Systems Manager Automation will be initiated).
    MaxLength: 12
    MinLength: 12
  TargetRegions:
    Type: CommaDelimitedList
    Description: AWS Regions that is in scope for this solution in a comma-separated format (for eg. ap-southeast-2, us-east-1).
    Default: ap-southeast-2,us-east-1
  TargetOUs:
    Description: AWS Organization Unit (OU) IDs which are in scope for this solution in a comma-separated format (for eg. ou-abc1-abc12ab1,ou-def2-def12de1).
    Type: CommaDelimitedList
    Default: ou-abc1-abc12ab1
Resources:   
  AdministrationIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      RoleName: SQLServerLTS-CloudFormation-StackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AdministrationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - "arn:*:iam::*:role/SQLServerLTS-CloudFormation-StackSetExecutionRole"
      Description: Configure the SQLServerLTS-CloudFormation-StackSetAdministrationRole to enable use of CloudFormation Stacksets
  ExecutionIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      RoleName: SQLServerLTS-CloudFormation-StackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${ManagementAccountId}:root"
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:*'
                  - 'sns:*'
                  - 'ssm:CreateDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:DeleteDocument'
                  - 'ssm:ListTagsForResource'
                  - 'iam:CreateRole'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'iam:PassRole'
                  - 'iam:DetachRolePolicy'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:DeleteRole'
                  - 'iam:CreateRole'
                  - 'iam:AttachRolePolicy'
                  - 'iam:PutRolePolicy'
                  - 'lambda:GetFunction'
                  - 'lambda:CreateFunction'
                  - 'lambda:DeleteFunction'
                  - 'lambda:GetFunctionConfiguration'
                  - 'lambda:InvokeFunction'
                  - 'lambda:AddPermission'
                  - 'lambda:RemovePermission'
                  - 'events:DescribeRule'
                  - 'events:PutRule'
                  - 'events:PutTargets'
                  - 'events:RemoveTargets'
                  - 'events:DeleteRule'
                Resource: '*'
      Description: Configure the SQLServerLTS-CloudFormation-StackSetExecutionRole to enable use of CloudFormation Stacksets
  SQLServerLTSSystemsManagerAutomationExecutionRoleStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      StackSetName: SQLServerLTSSystemsManagerAutomationExecutionRole
      Parameters:
        - 
          ParameterKey: ManagementAccountId
          ParameterValue: !Ref ManagementAccountId
      PermissionModel: SERVICE_MANAGED
      Capabilities: 
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      StackInstancesGroup:
        - Regions: 
          - us-east-1
          DeploymentTargets:
            OrganizationalUnitIds: !Ref TargetOUs
      TemplateBody: |
        Parameters:
          ManagementAccountId:
            Description: (Required) Management/Root AWS Account ID from where this solution will be executed. If you are using AWS Organizations then you need to specify the root/management account.
            Type: String
            Default: '123456789012'
        Resources:
          SQLServerLTSSystemsManagerAutomationExecutionRole:
            Type: 'AWS::IAM::Role'
            Properties:
              RoleName: SQLServerLTS-SystemsManager-AutomationExecutionRole
              AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                      AWS: !Ref ManagementAccountId
                    Action:
                      - 'sts:AssumeRole'
                  - Effect: Allow
                    Principal:
                      Service: ssm.amazonaws.com
                    Action:
                      - 'sts:AssumeRole'
                  - Effect: Allow
                    Principal:
                      Service: license-manager.amazonaws.com
                    Action: 'sts:AssumeRole'
                  - Effect: Allow
                    Principal:
                      Service: license-manager.member-account.amazonaws.com
                    Action: 'sts:AssumeRole'
              ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole'
              Path: /
              Policies:
                - PolicyName: ExecutionPolicy
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'resource-groups:ListGroupResources'
                          - 'tag:GetResources'
                          - 'license-manager:UpdateLicenseSpecificationsForResource'
                          - 'license-manager:GetLicenseConfiguration'
                          - 'ssm:DeleteInventory'
                          - 'ssm:PutInventory'
                          - 'ssm:GetInventorySchema'
                          - 'ssm:StartAutomationExecution'
                          - 'ssm:ListCommands'
                          - 'ssm:DescribeInstanceInformation'
                          - 'ssm:ListCommandInvocations'
                          - 'ssm:UpdateInstanceAssociationStatus'
                          - 'ec2:DescribeInstances'
                          - 'ec2:DescribeTags'
                          - 'license-manager:ListLicenseSpecificationsForResource'
                          - 'ec2messages:GetEndpoint'
                          - 'ec2messages:FailMessage'
                          - 'ec2messages:AcknowledgeMessage'
                          - 'ec2messages:SendReply'
                          - 'ec2messages:GetMessages'
                          - 'ssm:ListDocuments'
                          - 'license-manager:ListLicenseConfigurations'
                        Resource: '*'
                      - Effect: Allow
                        Action:
                          - 'iam:PassRole'
                        Resource: !Sub >-
                          arn:${AWS::Partition}:iam::${AWS::AccountId}:role/SQLServerLTS-SystemsManager-AutomationExecutionRole
                      - Effect: Allow
                        Action:
                          - 'license-manager:UpdateLicenseSpecificationsForResource'
                          - 'license-manager:GetLicenseConfiguration'
                        Resource:
                          - '*'
                      - Effect: Allow
                        Action:
                          - 'ssm:SendCommand'
                        Resource:
                          - 'arn:aws:ec2:*:*:instance/*'
                          - >-
                            arn:aws:ssm:*:*:automation-definition/Secondary-SQLServerLicenseTrackingSolution-Document:VersionId}
                          - 'arn:aws:ssm:*:*:document/Secondary-SQLServerLicenseTrackingSolution-Document'
                          - 'arn:aws:ssm:*:*:document/AWS-RunPowerShellScript'
                      - Effect: Allow
                        Action:
                          - 'ssm:DescribeDocument'
                          - 'ssm:ModifyDocumentPermission'
                          - 'ssm:DescribeDocumentPermission'
                        Resource: >-
                          arn:aws:ssm:*:*:document/Secondary-SQLServerLicenseTrackingSolution-Document
  SecondaryAutomationDocumentStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      AdministrationRoleARN: !GetAtt AdministrationIAMRole.Arn
      ExecutionRoleName: !Ref ExecutionIAMRole
      StackSetName: SecondaryAutomationDocumentStackSet
      PermissionModel: SELF_MANAGED
      Capabilities: 
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      StackInstancesGroup:
        - Regions: !Ref TargetRegions
          DeploymentTargets:
            Accounts:
              - !Ref ManagementAccountId
      TemplateBody: |
        Resources:
          SecondarySSMDocument:
            Type: 'AWS::SSM::Document'
            Properties:
              Name: Secondary-SQLServerLicenseTrackingSolution-Document
              Content: !Sub |
                {
                  "description" : "Secondary document for SQL License Tracking Solution",
                  "schemaVersion" : "0.3",
                  "assumeRole" : "{{ AutomationAssumeRole }}",
                  "outputs" : [ 
                    "updateInventory.result",
                    "updateLicenseManagerConfiguration.result" 
                  ],
                  "parameters" : {
                    "InstanceId" : {
                      "type" : "String",
                      "description" : "(Required) Use * to target all instances in the account this solution is deployed into or you can specify an individual instance ID",
                      "allowedPattern" : "\\*|^[m]{0,1}i-[a-z0-9]{8,17}",
                      "default" : "*"
                    },
                    "TagKey" : {
                      "type" : "String",
                      "description" : "(Optional) This parameter is required if you want to target all managed instances using tags",
                      "default" : "LicenseTrackingSolution-ManagedInstance"
                    },
                    "TagValue" : {
                      "type" : "String",
                      "description" : "(Optional) This parameter is required if you want to target all managed instances using tags",
                      "default" : "true"
                    },
                    "Region" : {
                      "type" : "String",
                      "description" : "AWS Region",
                      "default" : "{{global:REGION}}"
                    },
                    "AccountId" : {
                      "type" : "String",
                      "description" : "AWS Account ID",
                      "default" : "{{global:ACCOUNT_ID}}"
                    },
                    "SQLServerENTLicenseConfiguration" : {
                      "type" : "String",
                      "description" : "License Configuration ARN for SQL Enterprise Edition or leave it as -"
                    },
                    "SQLServerEXPLicenseConfiguration" : {
                      "type" : "String",
                      "description" : "License Configuration ARN for SQL Express Edition or leave it as -"
                    },
                    "SQLServerSTDLicenseConfiguration" : {
                      "type" : "String",
                      "description" : "License Configuration ARN for SQL Standard Edition or leave it as -"
                    },
                    "SQLServerWEBLicenseConfiguration" : {
                      "type" : "String",
                      "description" : "License Configuration ARN for SQL Web Edition or leave it as -"
                    },
                    "SQLServerDEVLicenseConfiguration" : {
                      "type" : "String",
                      "description" : "License Configuration ARN for SQL Developer Edition or leave it as -"
                    },
                    "AutomationAssumeRole" : {
                      "type" : "String",
                      "description" : "(Required) The IAM role required to execute this document. If no role is specified, then AWS Systems Manager will be unable to complete the execution of this document.",
                      "default" : "SQLServerLTS-SystemsManager-AutomationExecutionRole"
                    }
                  },
                  "mainSteps" : [ {
                      "name" : "removeLicenseConfigDataForInstance",
                      "action" : "aws:executeScript",
                      "description" : "This step performs a clean up task. Removing any association to the license configuration if they exist. This gives us an opportunity to rehydrate the latest data to License Manager in case changes have been made",
                      "inputs" : {
                        "Runtime" : "python3.7",
                        "Handler" : "script_handler",
                        "Script" : "import boto3\nimport json\nimport botocore\n\ndef script_handler(events, context):\n\n  lmClient = boto3.client('license-manager')\n  \n  accountId = events['accountId'] \n  region = events['region'] \n  instanceId = events['instanceId'] \n  sqlServerENTLicenseConfig = events['sqlServerENTLicenseConfig'] \n  sqlServerSTDLicenseConfig = events['sqlServerSTDLicenseConfig']\n  sqlServerEXPLicenseConfig = events['sqlServerEXPLicenseConfig']\n  sqlServerWEBLicenseConfig = events['sqlServerWEBLicenseConfig']\n  sqlServerDEVLicenseConfig = events['sqlServerDEVLicenseConfig']\n\n  ec2ARN = f\"arn:aws:ec2:{region}:{accountId}:instance/{instanceId}\"\n  licenseConfigARN = ''\n  numberOfUpdates = 0\n  \n  try:\n    lmResponse = lmClient.list_license_specifications_for_resource(\n                  ResourceArn=ec2ARN,\n                  MaxResults=10\n                  )\n                  \n    if lmResponse['LicenseSpecifications']:\n      for spec in lmResponse['LicenseSpecifications']:\n        if spec['LicenseConfigurationArn']:\n          if (sqlServerENTLicenseConfig and spec['LicenseConfigurationArn'] == sqlServerENTLicenseConfig):\n           licenseConfigARN = sqlServerENTLicenseConfig\n           \n          elif (sqlServerSTDLicenseConfig and spec['LicenseConfigurationArn'] == sqlServerSTDLicenseConfig):\n           licenseConfigARN = sqlServerSTDLicenseConfig\n                        \n          elif (sqlServerEXPLicenseConfig and spec['LicenseConfigurationArn'] == sqlServerEXPLicenseConfig):\n           licenseConfigARN = sqlServerEXPLicenseConfig\n          \n          elif (sqlServerWEBLicenseConfig and spec['LicenseConfigurationArn'] == sqlServerWEBLicenseConfig):\n           licenseConfigARN = sqlServerWEBLicenseConfig\n          \n          elif (sqlServerDEVLicenseConfig and spec['LicenseConfigurationArn'] == sqlServerDEVLicenseConfig):\n            licenseConfigARN = sqlServerDEVLicenseConfig\n                        \n        if licenseConfigARN:\n          updateResponse = lmClient.update_license_specifications_for_resource(\n                        ResourceArn=ec2ARN,\n                        RemoveLicenseSpecifications=[\n                        {\n                            'LicenseConfigurationArn': licenseConfigARN\n                        }]);\n          numberOfUpdates = numberOfUpdates + 1\n          licenseConfigARN = ''                \n  \n  except botocore.exceptions.ClientError as error:\n    if 'Resource ARN is invalid' in error.response['Error']['Message']:\n      print('EC2 does not exist for this resource. Skipping this step') \n    \n  return {'message': f\"Removed {ec2ARN} from {numberOfUpdates} License Configuration(s)\" }",
                        "InputPayload" : {
                          "instanceId" : "{{ InstanceId }}",
                          "accountId" : "{{ AccountId }}",
                          "region" : "{{ Region }}",
                          "sqlServerENTLicenseConfig" : "{{ SQLServerENTLicenseConfiguration }}",
                          "sqlServerSTDLicenseConfig" : "{{ SQLServerSTDLicenseConfiguration }}",
                          "sqlServerEXPLicenseConfig" : "{{ SQLServerEXPLicenseConfiguration }}",
                          "sqlServerWEBLicenseConfig" : "{{ SQLServerWEBLicenseConfiguration }}",
                          "sqlServerDEVLicenseConfig" : "{{ SQLServerDEVLicenseConfiguration }}"
                        }
                      },
                      "nextStep" : "assertInstanceEligibility",
                      "onFailure" : "Abort"
                    }, {
                      "name" : "assertInstanceEligibility",
                      "action" : "aws:executeScript",
                      "description" : "This step checks if the EC2 instance is eligible for this document. The two criteria for this are - (i) is a SSM managed instance and is currently online, (ii) is running on a Windows operating system",
                      "inputs" : {
                        "Runtime" : "python3.7",
                        "Handler" : "script_handler",
                        "Script" : "import sys\nimport boto3\nimport json\nimport botocore\n\ndef script_handler(events, context):\n  instanceId = events['instanceId']\n\n  client = boto3.client('ssm')\n  \n  response = client.describe_instance_information(\n    Filters=[\n        {\n            'Key': 'InstanceIds',\n            'Values': [\n                instanceId,\n            ]\n        },\n    ]\n  )\n  \n  if response[\"InstanceInformationList\"]:\n    if response[\"InstanceInformationList\"][0]['PingStatus'] == 'Online' and response[\"InstanceInformationList\"][0]['PlatformType'] == 'Windows':\n      status = f\"{instanceId} is eligible for this automation execution\"\n    else:\n      raise Exception(f\"{instanceId} currently appears to be unavilable for this automation\")\n  else:\n    raise Exception(f\"{instanceId} is ineligible for this automation\")\n                    \n  return status",
                        "InputPayload" : {
                          "instanceId" : "{{ InstanceId }}"
                        }
                      },
                      "nextStep" : "isBYOLSQLServerInstalled",
                      "isCritical" : false
                    }, {
                      "name" : "isBYOLSQLServerInstalled",
                      "description" : "In this step we check if SQL Server is installed, is not a SQL Server License Included instance and if it exists then retrieve the instance(s) details running on the EC2 instance using Windows Registry. The output captures the Name, Edition and Version of the SQL Servers",
                      "isEnd" : false,
                      "action" : "aws:runCommand",
                      "onFailure" : "Abort",
                      "inputs" : {
                        "DocumentName" : "AWS-RunPowerShellScript",
                        "InstanceIds" : [ "{{ InstanceId }}" ],
                        "Parameters" : {
                          "commands" : [ "$found = \"false\"\n\ntry {\n  $webrequest = [System.Net.WebRequest]::Create(\"http://169.254.169.254/latest/dynamic/instance-identity/document\")\n  $response = $webrequest.GetResponse()\n  $stream = $response.GetResponseStream()\n  $sr = new-object System.IO.StreamReader($stream)\n  $content = $sr.ReadToEnd();\n  [System.Reflection.Assembly]::LoadWithPartialName(\"System.Web.Extensions\") | out-null\n  $ser = New-Object System.Web.Script.Serialization.JavaScriptSerializer\n  $billingProduct = $ser.DeserializeObject($content).billingProducts\n\n  if (($billingProduct -eq \"bp-6aa54003\") -or ($billingProduct -eq \"bp-62a5400b\") -or ($billingProduct -eq \"bp-65a5400c\")) \n  {\n    return $found\n  }\n}\n\ncatch {\n    $ErrorMessage = $Error[0].Exception.ErrorRecord.Exception.Message;\n}\n\n$list = New-Object System.Collections.ArrayList\n$pathExists = Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\"\nif ($pathExists)\n{\n  $found = \"true\"\n  $server = (get-itemproperty -ErrorAction Stop 'HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server').InstalledInstances\n  foreach ($s in $server) \n  {\n    $p = (Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names\\SQL').$s\n    $o = [pscustomobject]@{\n    Name = $p\n    Edition = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\$p\\Setup\").Edition\n    Version = (Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server\\$p\\Setup\").Version\n    }\n    $server_info_list = $list.Add($o)\n  }\n  $jsonList = ConvertTo-Json -InputObject $list\n  return $jsonList\n}\nelse\n{\n  return $found\n} \n" ]
                        }
                      },
                      "outputs" : [ {
                        "Name" : "result",
                        "Type" : "String",
                        "Selector" : "$.Output"
                      } ]
                    }, {
                      "name" : "foundSQLServerInstalledBranch",
                      "description" : "This step will branch (https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-action-branch.html) out based on the evaluation of the previous step, defaulting to the next step if SQL Server exists on the EC2 instance otherwise exiting if unavailable",
                      "isEnd" : false,
                      "onFailure" : "Abort",
                      "action" : "aws:branch",
                      "inputs" : {
                        "Choices" : [ {
                          "NextStep" : "exitIfNoSqlServerFound",
                          "Variable" : "{{isBYOLSQLServerInstalled.result}}",
                          "Contains" : "false"
                        } ],
                        "Default" : "updateInventory"
                      }
                    }, {
                      "name" : "updateInventory",
                      "description" : "Using the output of step 3 (metadata) we will update SSM Inventory with a custom inventory of type “Custom:SQLServer” for the EC2 instance",
                      "action" : "aws:executeScript",
                      "inputs" : {
                        "Runtime" : "python3.7",
                        "Handler" : "script_handler",
                        "Script" : "import boto3\nimport json\nfrom datetime import datetime, timezone\n  \nssm = boto3.client('ssm')\n\ndef script_handler(events, context):\n  sqlInfo = events['sqlInfo']\n  infoList = list(eval(sqlInfo))\n  timestamp = datetime.now(timezone.utc).isoformat()[:-13] + 'Z'\n  \n  response = ssm.put_inventory(\n    InstanceId=events['instanceId'],\n    Items=[\n        {\n            'TypeName': 'Custom:SQLServer',\n            'SchemaVersion': '1.0',\n            'CaptureTime': timestamp,\n            'Content': infoList\n        },\n    ]\n  )\n  \n  if \"HTTPStatusCode\" in response[\"ResponseMetadata\"]:\n    httpStatusCode = response[\"ResponseMetadata\"][\"HTTPStatusCode\"]\n    if httpStatusCode == 200:\n      status = 'Successfully updated Inventory'\n    else:\n      status = 'Failed to update Inventory'\n  else:\n    raise Exception(f\"It appears that this step couldn't be completed due to an unknown error. Please check the logs for more details\")\n    \n  return {'message': status}",
                        "InputPayload" : {
                          "instanceId" : "{{InstanceId}}",
                          "sqlInfo" : "{{isBYOLSQLServerInstalled.result}}"
                        }
                      },
                      "isEnd" : false,
                      "outputs" : [ {
                        "Name" : "result",
                        "Selector" : "$.Payload.message",
                        "Type" : "String"
                      } ],
                      "nextStep" : "updateLicenseManagerConfiguration"
                    }, {
                      "name" : "updateLicenseManagerConfiguration",
                      "description" : "In this last step we determine the highest edition of SQL installed and accordingly update the License Manager Configuration associated with the EC2 instance",
                      "action" : "aws:executeScript",
                      "isEnd" : true,
                      "onFailure" : "Abort",
                      "inputs" : {
                        "Runtime" : "python3.7",
                        "Handler" : "script_handler",
                        "InputPayload" : {
                          "accountId" : "{{ AccountId }}",
                          "region" : "{{ Region }}",
                          "instanceId" : "{{ InstanceId }}",
                          "sqlInfo" : "{{isBYOLSQLServerInstalled.result}}",
                          "sqlServerENTLicenseConfig" : "{{ SQLServerENTLicenseConfiguration }}",
                          "sqlServerSTDLicenseConfig" : "{{ SQLServerSTDLicenseConfiguration }}",
                          "sqlServerEXPLicenseConfig" : "{{ SQLServerEXPLicenseConfiguration }}",
                          "sqlServerWEBLicenseConfig" : "{{ SQLServerWEBLicenseConfiguration }}",
                          "sqlServerDEVLicenseConfig" : "{{ SQLServerDEVLicenseConfiguration }}"
                        },
                        "Script" : "import boto3\nimport json\nimport re\nfrom re import search\n\ndef script_handler(events, context):\n  \n  lmClient = boto3.client('license-manager')\n  sqlInfo = events['sqlInfo']\n  jsonSqlInfo = json.loads(sqlInfo)\n  \n  editions = {1: 'Enterprise Edition',\n        2: 'Standard Edition',\n        3: 'Web Edition',\n        4: 'Express Edition',\n        5: 'Developer Edition'}\n        \n  highestEdition = ''\n  for key, value in editions.items():\n\n    for instance in jsonSqlInfo:\n    \n      if search(value,instance[\"Edition\"]):\n        highestEdition = value\n        break\n    if highestEdition:\n      break\n  \n  accountId =  events['accountId'] \n  region = events['region'] \n  instanceId = events['instanceId'] \n  sqlServerENTLicenseConfig = events['sqlServerENTLicenseConfig'] \n  sqlServerSTDLicenseConfig = events['sqlServerSTDLicenseConfig'] \n  sqlServerEXPLicenseConfig = events['sqlServerEXPLicenseConfig'] \n  sqlServerWEBLicenseConfig = events['sqlServerWEBLicenseConfig'] \n  sqlServerDEVLicenseConfig = events['sqlServerDEVLicenseConfig'] \n  \n  ec2ARN = f\"arn:aws:ec2:{region}:{accountId}:instance/{instanceId}\"\n  licenseConfigARN = ''\n  \n  if highestEdition == \"Enterprise Edition\" and sqlServerENTLicenseConfig:\n    licenseConfigARN = sqlServerENTLicenseConfig\n     \n  elif highestEdition == \"Standard Edition\" and sqlServerSTDLicenseConfig:\n    licenseConfigARN =  sqlServerSTDLicenseConfig\n    \n  elif highestEdition == \"Web Edition\" and sqlServerWEBLicenseConfig:\n    licenseConfigARN =  sqlServerWEBLicenseConfig \n    \n  elif highestEdition == \"Express Edition\" and sqlServerEXPLicenseConfig:\n    licenseConfigARN  = sqlServerEXPLicenseConfig\n          \n  elif highestEdition == \"Developer Edition\" and sqlServerDEVLicenseConfig:\n    licenseConfigARN  = sqlServerDEVLicenseConfig\n    \n  else:\n    raise Exception(f\"Sorry, No {highestEdition} License Configuration ARN has been supplied\")\n    \n    \n  if licenseConfigARN:\n      \n    response = lmClient.update_license_specifications_for_resource(\n      ResourceArn=ec2ARN,\n      AddLicenseSpecifications=[\n      {\n          'LicenseConfigurationArn': licenseConfigARN\n      }]);\n    \n    if \"HTTPStatusCode\" in response[\"ResponseMetadata\"]:\n      httpStatusCode = response[\"ResponseMetadata\"][\"HTTPStatusCode\"]\n    if httpStatusCode == 200:\n      status = f\"Succesfully updated {licenseConfigARN} with {ec2ARN}\"\n    else:\n      status = f\"Failed to update {licenseConfigARN} with {ec2ARN}\"\n  else:\n    raise Exception(f\"It appears that this step couldn't be completed due to an unknown error. Please check the logs for more details\")\n  \n  return {'message': status}"
                      },
                      "outputs" : [ {
                        "Name" : "result",
                        "Selector" : "$.Payload.message",
                        "Type" : "String"
                      } ]
                    }, {
                      "name" : "exitIfNoSqlServerFound",
                      "action" : "aws:runCommand",
                      "isEnd" : true,
                      "onFailure" : "Abort",
                      "inputs" : {
                        "DocumentName" : "AWS-RunPowerShellScript",
                        "Parameters" : {
                          "commands" : [ "$message= 'No SQL Instances found'\nreturn $message\n" ]
                        },
                        "InstanceIds" : [ "{{ InstanceId }}" ]
                      },
                      "outputs" : [ {
                        "Name" : "message",
                        "Selector" : "$.Output",
                        "Type" : "String"
                      } ],
                      "description" : "This step is triggered if there are no SQL servers found."
                    } ]
                  }
              DocumentType: "Automation"
          LambdaFunctionExecutionRole:
            Type: AWS::IAM::Role
            Properties:
              AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                      Service: [lambda.amazonaws.com]
                    Action: ['sts:AssumeRole']
              ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
              Path: /
              Policies:
                - PolicyName: SQLServerLTS-SecondaryDocumentPermissionManagementLambdaPolicy
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action: ['ssm:ListDocuments','organizations:ListAccounts']
                        Resource: '*'
                      - Effect: Allow
                        Action: ['ssm:DescribeDocument','ssm:ModifyDocumentPermission','ssm:DescribeDocumentPermission']
                        Resource: 'arn:aws:ssm:*:*:document/Secondary-SQLServerLicenseTrackingSolution-Document'
          LambdaFunction:
            Type: "AWS::Lambda::Function"
            Properties:
              Description: "Lambda function to maintain permissions for Secondary-SQLServerLicenseTrackingSolution-Document with all accounts in the Organization (AWS Organization)"
              FunctionName: "Modify-SQLServerSecondaryDocument-Permission"
              Handler: "index.lambda_handler"
              Code: 
                ZipFile: |
                  import sys
                  import boto3
                  import json
                  import botocore
                  import cfnresponse

                  def lambda_handler(events, context):
                    organization = boto3.client('organizations')
                    ssm = boto3.client('ssm')
                    target = ''
                    accountList = []

                    accountListResponse = organization.list_accounts()
                    
                    if accountListResponse['Accounts']:
                      for accountId in accountListResponse['Accounts']:
                        accountList.append(accountId['Id'])
                    else:
                      print('No account IDs found in this account')
                        
                    #Get current document permissions
                    oldDocumentPermissionResponse = ssm.describe_document_permission(
                      Name='Secondary-SQLServerLicenseTrackingSolution-Document',
                      PermissionType='Share'
                    )
                    
                    #Remove old document permissions
                    if oldDocumentPermissionResponse['AccountIds']:
                      removeOldDocumentPermissionResponse = ssm.modify_document_permission(
                        Name='Secondary-SQLServerLicenseTrackingSolution-Document',
                        PermissionType='Share',
                        AccountIdsToRemove=oldDocumentPermissionResponse['AccountIds']
                      )
                    
                    #Modify the document permissions with the new list of accounts from the specified OUs
                    response = ssm.modify_document_permission(
                      Name='Secondary-SQLServerLicenseTrackingSolution-Document',
                      PermissionType='Share',
                      AccountIdsToAdd=accountList
                    )
                    
                    if response['ResponseMetadata']:
                      if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                        print(f"Successfully modified Secondary-SQLServerLicenseTrackingSolution-Document permissions to be shared with these accounts: "+','.join(accountList))
                        responseValue = response['ResponseMetadata']
                        responseData = {}
                        responseData['Data'] = responseValue
                        cfnresponse.send(events, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
                      else:
                        responseValue = "Error"
                        responseData = {}
                        responseData['Error'] = responseValue
                        cfnresponse.send(events, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")
                        raise Exception(f"There was a problem modifying the permissions of Secondary-SQLServerLicenseTrackingSolution-Document, check the logs for more details")
                    else:
                      raise Exception(f"There seems to be a problem, check the logs for more details")
              MemorySize: 128
              Role: !GetAtt LambdaFunctionExecutionRole.Arn
              Runtime: "python3.8"
              Timeout: 3
              TracingConfig: 
                Mode: "PassThrough"
          ScheduledRule:
            Type: "AWS::Events::Rule"
            Properties:
              Name: "Modify-SQLServerSecondaryDocument-Permission-Rule"
              Description: "Trigger for Modify-SQLServerSecondaryDocument-Permission function"
              ScheduleExpression: "rate(30 days)"
              State: "ENABLED"
              Targets: 
              - 
                Arn: !GetAtt LambdaFunction.Arn
                Id: !Select [2, !Split ["/", !Sub "${AWS::StackId}"]] 
              EventBusName: "default"
          PermissionForEventsToInvokeLambda: 
            Type: AWS::Lambda::Permission
            Properties: 
              FunctionName: !Ref "LambdaFunction"
              Action: "lambda:InvokeFunction"
              Principal: "events.amazonaws.com"
              SourceArn: !GetAtt ScheduledRule.Arn
          InitialLambdaInvocation:
            Type: AWS::CloudFormation::CustomResource
            DependsOn: LambdaFunction
            Version: "1.0"
            Properties:
              ServiceToken: !GetAtt LambdaFunction.Arn