description: Document to orchestrate the the SQL database License Tracking Solution
schemaVersion: '0.3'
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  DeploymentTargets:
    type: StringList
    description: Specify the AWS Organizational Units (OUs) where SQL databases are deployed
  TargetRegions:
    type: StringList
    description: Specify the AWS Regions where SQL databases are deployed
  TargetKey:
    type: String
    default: tag:SQLServerLTS-ManagedInstance
    description: "(Optional) Specify the instances you want to target using Resource
      Groups, tags (use tag: format) or all instances with InstanceIds. Refer https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_StartAutomationExecution.html
      for more details."
  TargetValues:
    type: String
    default: 'true'
    description: "(Optional) Specify the values you want to target like tag value
      or * for all instances. Refer https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_StartAutomationExecution.html
      for more details."
  AutomationAssumeRole:
    type: String
    description: The IAM role required to execute this document (select SQLServerLTS-SystemsManagerAutomationAdministrationRole
      from the drop-down if you deployed this solution using CloudFormation)
  MaxConcurrency:
    type: String
    default: '4'
  MaxErrors:
    type: String
    default: '4'
mainSteps:
  - name: invokeSQLServerLTS_DeleteInventory
    description: This step invokes the invokeSQLServerLTS_DeleteInventory Automation
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        import sys
        import boto3
        import json
        import botocore

        def script_handler(events, context):
          client = boto3.client('ssm')
                    
          automationAssumeRole = events['automationAssumeRole']
          targetAccounts = events['targetAccounts']
          targetRegions = events['targetRegions']
          region = events['region']
          maxConcurrency = events['maxConcurrency']
          maxErrors = events['maxErrors']
          accountId = events['accountId']
          accountList = []
          documentName = 'arn:aws:ssm:'+region+':'+accountId+':document/SQLServerLTS-DeleteInventory'
   
          response = client.start_automation_execution(
            DocumentName=documentName,
            Parameters={
              'AutomationAssumeRole': [
                automationAssumeRole
              ]
            },
            TargetLocations=[
              {
                'Accounts': deploymentTargets,
                'ExecutionRoleName': 'SQLServerLTS-SystemsManagerAutomationExecutionRole',
                'Regions': targetRegions,
                'TargetLocationMaxConcurrency': maxConcurrency,
                'TargetLocationMaxErrors': maxErrors
              }]
          )
                
          if response["AutomationExecutionId"]:
            status = documentName+" has been successfuly invoked. Check AutomationExecutionId - " + response["AutomationExecutionId"] + " for more details"
          else:
            status = documentName+" was not invoked"
            raise Exception(f"It appears that this step couldn\'t be completed due to an unknown error. Please check the logs for more details") 
        
          return {'message': status}
      InputPayload:
        deploymentTargets: '{{ DeploymentTargets }}'
        targetRegions: '{{ TargetRegions }}'
        maxConcurrency: '{{ MaxConcurrency }}'
        maxErrors: '{{ MaxErrors }}'
        automationAssumeRole: '{{ AutomationAssumeRole }}'
        accountId: '{{global:ACCOUNT_ID}}'
        region: '{{global:REGION}}'
    isCritical: true
    onFailure: Abort
    nextStep: invokeSQLServerLTS_ManageLicenceUtilizationAutomation
  - name: invokeSQLServerLTS_ManageLicenceUtilizationAutomation
    description: This step invokes the invokeSQLServerLTS_ManageLicenceUtilization Automation
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        import sys
        import boto3
        import json
        import botocore

        def script_handler(events, context):
          client = boto3.client('ssm')
                    
          automationAssumeRole = events['automationAssumeRole']
          targetAccounts = events['targetAccounts']
          targetRegions = events['targetRegions']
          region = events['region']
          maxConcurrency = events['maxConcurrency']
          maxErrors = events['maxErrors']
          accountId = events['accountId']
          accountList = []
          documentName = 'arn:aws:ssm:'+region+':'+accountId+':document/SQLServerLTS-ManageLicenceUtilization'
                 
          response = client.start_automation_execution(
            DocumentName=documentName,
            Parameters={
              'AutomationAssumeRole': [
                automationAssumeRole
              ]
            },
            TargetParameterName='InstanceId',
            Targets=[
              {
                  'Key': targetKey,
                  'Values': [
                      targetValues
                  ]
              }
            ],
            TargetLocations=[
              {
                'Accounts': deploymentTargets,
                'ExecutionRoleName': 'SQLServerLTS-SystemsManagerAutomationExecutionRole',
                'Regions': targetRegions,
                'TargetLocationMaxConcurrency': maxConcurrency,
                'TargetLocationMaxErrors': maxErrors
              }]
          )
                
          if response["AutomationExecutionId"]:
            status = documentName+" has been successfuly invoked. Check AutomationExecutionId - " + response["AutomationExecutionId"] + " for more details"
          else:
            status = documentName+" was not invoked"
            raise Exception(f"It appears that this step couldn\'t be completed due to an unknown error. Please check the logs for more details") 
          
          return {'message': status}
      InputPayload:
        deploymentTargets: '{{ DeploymentTargets }}'
        targetRegions: '{{ TargetRegions }}'
        maxConcurrency: '{{ MaxConcurrency }}'
        maxErrors: '{{ MaxErrors }}'
        automationAssumeRole: '{{ AutomationAssumeRole }}'
        accountId: '{{global:ACCOUNT_ID}}'
        region: '{{global:REGION}}'
        targetKey: '{{ TargetKey }}'
        targetValues: '{{ TargetValues }}'
    isCritical: true
    onFailure: Abort
    isEnd: true