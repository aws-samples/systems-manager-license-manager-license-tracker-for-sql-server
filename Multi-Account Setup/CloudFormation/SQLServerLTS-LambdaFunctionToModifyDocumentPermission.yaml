AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to deploy a lambda function to maintain (sharing) permissions for Secondary-SQLServerLicenseTrackingSolution-Document"
Resources:
  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: SQLServerLTS-SecondaryDocumentPermissionManagementLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['ssm:ListDocuments','organizations:ListAccounts']
                Resource: '*'
              - Effect: Allow
                Action: ['ssm:DescribeDocument','ssm:ModifyDocumentPermission','ssm:DescribeDocumentPermission']
                Resource: 'arn:aws:ssm:*:*:document/Secondary-SQLServerLicenseTrackingSolution-Document'
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda function to maintain permissions for Secondary-SQLServerLicenseTrackingSolution-Document with all accounts in the Organization (AWS Organization)"
      FunctionName: "Modify-SQLServerSecondaryDocument-Permission"
      Handler: "index.lambda_handler"
      Code: 
        ZipFile: |
          import sys
          import boto3
          import json
          import botocore

          def lambda_handler(events, context):
            organization = boto3.client('organizations')
            ssm = boto3.client('ssm')
            target = ''
            accountList = []

            accountListResponse = organization.list_accounts()
            
            if accountListResponse['Accounts']:
              for accountId in accountListResponse['Accounts']:
                accountList.append(accountId['Id'])
            else:
              print('No account IDs found in this account')
                
            #Get current document permissions
            oldDocumentPermissionResponse = ssm.describe_document_permission(
              Name='Secondary-SQLServerLicenseTrackingSolution-Document',
              PermissionType='Share'
            )
            
            #Remove old document permissions
            if oldDocumentPermissionResponse['AccountIds']:
              removeOldDocumentPermissionResponse = ssm.modify_document_permission(
                Name='Secondary-SQLServerLicenseTrackingSolution-Document',
                PermissionType='Share',
                AccountIdsToRemove=oldDocumentPermissionResponse['AccountIds']
              )
            
            #Modify the document permissions with the new list of accounts from the specified OUs
            response = ssm.modify_document_permission(
              Name='Secondary-SQLServerLicenseTrackingSolution-Document',
              PermissionType='Share',
              AccountIdsToAdd=accountList
            )
            
            if response['ResponseMetadata']:
              if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                print(f"Successfully modified Secondary-SQLServerLicenseTrackingSolution-Document permissions to be shared with these accounts: "+','.join(accountList))
              else:
                raise Exception(f"There was a problem modifying the permissions of Secondary-SQLServerLicenseTrackingSolution-Document, check the logs for more details")
            else:
              raise Exception(f"There seems to be a problem, check the logs for more details")
      MemorySize: 128
      Role: !GetAtt LambdaFunctionExecutionRole.Arn
      Runtime: "python3.8"
      Timeout: 3
      TracingConfig: 
        Mode: "PassThrough"
  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "Modify-SQLServerSecondaryDocument-Permission-Rule"
      Description: "Trigger for Modify-SQLServerSecondaryDocument-Permission function"
      ScheduleExpression: "rate(30 days)"
      State: "ENABLED"
      Targets: 
      - 
        Arn: !GetAtt LambdaFunction.Arn
        Id: !Select [2, !Split ["/", !Sub "${AWS::StackId}"]] 
      EventBusName: "default"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn


