description: Primary document for SQL License Tracking Solution
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
outputs:
  - deleteCustomInventory.result
  - invokeSecondarySQLServerLicenseTrackingSolutionAutomation.result
parameters:
  Targets:
    type: String
    description: AWS account IDs or OUs that should be covered by this solution
    default: '{{global:ACCOUNT_ID}}'
  Regions:
    type: String
    description: AWS Regions that should be covered by this solution
    default: '{{global:REGION}}'
  TagKey:
    description: (Optional) This parameter is required if you want to target all managed instances using tags
    type: String
    default: LicenseTrackingSolution-ManagedInstance
  TagValue:
    description: (Optional) This parameter is required if you want to target all managed instances using tags
    type: String
    default: 'true'
  SQLServerEELicenseConfiguration:
    type: String
    description: License Configuration for SQL Enterprise Edition or leave it as -
    default: '-'
  SQLServerEXPLicenseConfiguration:
    type: String
    description: License Configuration for SQL Express Edition or leave it as -
    default: '-'
  SQLServerSTDLicenseConfiguration:
    type: String
    description: License Configuration for SQL Standard Edition or leave it as -
    default: '-'
  SQLServerWEBLicenseConfiguration:
    type: String
    description: License Configuration for SQL Web Edition or leave it as -
    default: '-'
  SQLServerDEVLicenseConfiguration:
    type: String
    description: License Configuration for SQL Developer Edition or leave it as -
    default: '-'
  AutomationAssumeRole:
    type: String
    description: The IAM role for this execution. Unless required DO NOT UPDATE THIS
    default: AWS-SystemsManager-AutomationAdministrationRole
mainSteps:
  - name: deleteCustomInventory
    description: 'This clean up step deletes all the metadata associated with the custom inventory type created for MSSQL [Custom:SQLServer] on all the EC2 instances.'
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      Script: |-
        import sys
        import boto3
        import json
        import botocore
        import time

        def script_handler(events, context):
          client = boto3.client('ssm')
          
          get_inventory_response = client.get_inventory_schema(
            TypeName='Custom:SQLServer'
          )
          
          print(get_inventory_response)
          
          if get_inventory_response['Schemas']:
            delete_inventory_response = client.delete_inventory(
              TypeName='Custom:SQLServer',
              SchemaDeleteOption='DeleteSchema'
            )
            
            deletion_id = delete_inventory_response['DeletionId']
           
            wait_loop = True
            while wait_loop == True:
              describe_inventory_deletions_response = client.describe_inventory_deletions(
                DeletionId=deletion_id
              )
              if describe_inventory_deletions_response['InventoryDeletions']:
                if describe_inventory_deletions_response['InventoryDeletions'][0]['LastStatus'] == "Complete":
                  status = "Custom:SQLServer schema has been deleted successfuly. DeletionID: "+deletion_id
                  wait_loop = False
                  break
                else:
                  time.sleep(60)

          else:
            status = "Custom:SQLServer type doesn't exist in the Inventory so continuing to the next step."
            
          return {'message': status}
    outputs:
      - Name: result
        Selector: $.Payload.message
        Type: String
    isCritical: true
    onFailure: Abort
    nextStep: invokeSecondarySQLServerLicenseTrackingSolutionAutomation
  - name: invokeSecondarySQLServerLicenseTrackingSolutionAutomation
    description: This step invokes the SecondarySQLServerLicenseTrackingSolutionDocument Automation
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      Script: |-
        import sys
        import boto3
        import json
        import botocore

        def script_handler(events, context):
          client = boto3.client('ssm')
          tagKey = events['tagKey']
          tagValue = events['tagValue']
          sqlServerEELicenseConfig = events['sqlServerEELicenseConfig']
          sqlServerSTDLicenseConfig = events['sqlServerSTDLicenseConfig']
          sqlServerEXPLicenseConfig = events['sqlServerEXPLicenseConfig']
          sqlServerWEBLicenseConfig = events['sqlServerWEBLicenseConfig']
          sqlServerDEVLicenseConfig = events['sqlServerDEVLicenseConfig']
          automationAssumeRole = events['automationAssumeRole']
          accountId = events['accountId']
          region = events['region']
          
          documentName = 'arn:aws:ssm:'+region+':784315950497:document/Secondary-SQLServerLicenseTrackingSolution-Document'
          
          response = client.start_automation_execution(
            DocumentName=documentName,
            Parameters={
                'InstanceId': [
                    '*'
                ],
                'TagKey': [
                    tagKey
                ],
                'TagValue': [
                    tagValue
                ],
                'SQLServerEELicenseConfiguration': [
                    sqlServerEELicenseConfig
                ],
                'SQLServerSTDLicenseConfiguration': [
                    sqlServerSTDLicenseConfig
                ],
                'SQLServerEXPLicenseConfiguration': [
                    sqlServerEXPLicenseConfig
                ],
                'SQLServerWEBLicenseConfiguration': [
                    sqlServerWEBLicenseConfig
                ],
                'SQLServerDEVLicenseConfiguration': [
                    sqlServerDEVLicenseConfig
                ],
                'AutomationAssumeRole': [
                    automationAssumeRole
                ]
            },
            TargetParameterName='InstanceId',
            Targets=[
                {
                    'Key': 'tag:'+tagKey,
                    'Values': [
                        tagValue
                    ]
                }
            ]
          )
          
          if response["AutomationExecutionId"]:
            status = "Secondary-SQLServerLicenseTrackingSolution-Document has been successfuly invoked. Check AutomationExecutionId - " + response["AutomationExecutionId"] + " for more details"
          else:
            status = "Secondary-SQLServerLicenseTrackingSolution-Document was not invoked"
            raise Exception(f"It appears that this step couldn't be completed due to an unknown error. Please check the logs for more details") 
          
          return {'message': status}
      InputPayload:
        tagKey: '{{ TagKey }}'
        tagValue: '{{ TagValue }}'
        sqlServerEELicenseConfig: '{{ SQLServerEELicenseConfiguration }}'
        sqlServerSTDLicenseConfig: '{{ SQLServerSTDLicenseConfiguration }}'
        sqlServerEXPLicenseConfig: '{{ SQLServerEXPLicenseConfiguration }}'
        sqlServerWEBLicenseConfig: '{{ SQLServerWEBLicenseConfiguration }}'
        sqlServerDEVLicenseConfig: '{{ SQLServerDEVLicenseConfiguration }}'
        accountId: '{{global:ACCOUNT_ID}}'
        region: '{{global:REGION}}'
        automationAssumeRole: '{{ AutomationAssumeRole }}'
    outputs:
      - Name: result
        Selector: $.Payload.message
        Type: String
    isCritical: true
    onFailure: Abort
    isEnd: true